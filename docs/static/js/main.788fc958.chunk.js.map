{"version":3,"sources":["Components/Card.js","Components/Header.js","Components/ShowCards.js","Components/ShowDesc.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","to","card","id","ref","lastMovieRef","className","src","poster_path","alt","title","vote_average","overview","Header","isSearchBar","type","placeholder","onChange","handleOnChange","ShowCards","key","cards","sort","a","b","Date","parse","change","map","index","length","desc","ShowDesc","Id","useParams","useState","fetchURL","fetchURL2","release_date","data","setData","cast","setCast","director","setDirector","isLoading","setIsLoading","useEffect","axios","get","response","response2","status","c","s","name","crew","console","log","getData","backdrop_path","original_title","slice","parseFloat","runtime","toFixed","UPCOMMING_API","App","movies","setMovies","pages","setPages","pageNo","setPageNo","loading","setLoading","target","setTarget","m","p","fetch","then","res","json","results","total_pages","pop","observer","useRef","lastMovieElement","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","observe","exact","path","e","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAmBeA,EAjBF,SAACC,GACV,OACI,cAAC,IAAD,CAAMC,GAAI,IAAID,EAAME,KAAKC,GAAzB,SAA6B,sBAAKC,IAAKJ,EAAMK,aAAcC,UAAW,OAAzC,UACzB,qBAAKA,UAAW,aAAhB,SACI,qBAAKC,IAAMP,EAAME,KAAKM,YAAa,mCAAmCR,EAAME,KAAKM,YAAY,YAAaC,IAAI,wBAElH,sBAAKH,UAAW,mBAAhB,UACI,mBAAGH,GAAG,QAAN,SAAeH,EAAME,KAAKQ,QAC1B,mBAAGP,GAAG,SAAN,SAAgB,IAAMH,EAAME,KAAKS,aAAe,SAEpD,qBAAKL,UAAW,YAAhB,SACI,4BAAIN,EAAME,KAAKU,mB,sBCOhBC,EAfA,SAACb,GACZ,OACI,mCAEKA,EAAMc,YACH,uBAAOC,KAAK,OAAOC,YAAY,SAASC,SAAYjB,EAAMkB,iBAC7D,oBAAIZ,UAAU,WAAd,2BACD,cAAC,IAAD,CAAML,GAAG,KAAT,SAAc,cAAC,IAAD,CAAiBK,UAAU,oBC4BtCa,EAhCG,SAACnB,GAEf,IAAsBoB,EAYtB,OADApB,EAAMqB,MAAMC,MAXUF,EAWQ,eAVnB,SAASG,EAAGC,GACf,OAAIC,KAAKC,MAAMH,EAAEH,IAAQK,KAAKC,MAAMF,EAAEJ,IAC3B,EACAK,KAAKC,MAAMH,EAAEH,IAAQK,KAAKC,MAAMF,EAAEJ,KACjC,EAEL,KAMX,qCACA,cAAC,EAAD,CAAQN,aAAa,EAAMI,eAAgBlB,EAAM2B,SACjD,qBAAKrB,UAAU,YAAf,SACA,qBAAKH,GAAG,aAAR,SACCH,EAAMqB,MAAMO,KAAI,SAAC1B,EAAM2B,GAEpB,OAAG7B,EAAMqB,MAAMS,SAAUD,EAAQ,EAC1B,cAAC,EAAD,CAAMxB,aAAcL,EAAMK,aAA4BH,KAAMA,GAAfA,EAAKC,IAElD,cAAC,EAAD,CAAoB4B,MAAM,EAAO7B,KAAMA,GAA5BA,EAAKC,e,uDC3BpB,SAAS6B,IACpB,IAAIC,EAAKC,cACT,EAAmBC,mBAAS,sCAAD,OAAuCF,EAAG9B,GAA1C,6DAApBiC,EAAP,oBACA,EAAoBD,mBAAS,sCAAD,OAAuCF,EAAG9B,GAA1C,qEAArBkC,EAAP,oBACA,EAAwBF,mBAAS,CAC7BG,aAAc,KADlB,mBAAOC,EAAP,KAAaC,EAAb,KAGA,EAAwBL,mBAAS,IAAjC,mBAAOM,EAAP,KAAaC,EAAb,KACA,EAAgCP,mBAAS,UAAzC,mBAAOQ,EAAP,KAAiBC,EAAjB,KACA,EAAiCT,oBAAS,GAA1C,mBAAOU,EAAP,KAAiBC,EAAjB,KA8BA,OA5BAC,qBAAU,YACO,uCAAG,8BAAAxB,EAAA,+EAEeyB,IAAMC,IAAIb,GAFzB,cAEFc,EAFE,gBAGgBF,IAAMC,IAAIZ,GAH1B,OAGFc,EAHE,OAIe,MAApBD,EAASE,QAAuC,MAArBD,EAAUC,SACpCZ,EAAQU,EAASX,MACjBY,EAAUZ,KAAKE,KAAKb,KAAI,SAACyB,GAEe,WAA7BA,EAAC,sBAEAX,GAAQ,SAAAY,GAAC,OAAIA,EAAID,EAAEE,KAAO,WAGtCJ,EAAUZ,KAAKiB,KAAK5B,KAAI,SAACyB,GAEF,aAAZA,EAAC,KACJT,EAAYS,EAAEE,SAEtBT,GAAa,IAlBT,kDAqBRW,QAAQC,IAAR,MArBQ,0DAAH,qDAwBbC,KAEF,IAEEd,EAAY,yCAEZ,qCACI,cAAC,EAAD,CAAQ/B,aAAa,IACrB,sBAAKR,UAAU,gBAAf,UACI,qBAAKA,UAAU,eAAf,SACI,qBAAKC,IAAMgC,EAAKqB,cAAiB,kCAAoCrB,EAAKqB,cAAgB,gBAE9F,sBAAKtD,UAAU,gBAAf,UACI,+BAAKiC,EAAKsB,eAAV,IAA0B,qCAAQtB,EAAK5B,aAAb,UAC1B,uCAAU4B,EAAKD,aAAawB,MAAM,EAAE,GAApC,gBAAqDC,WAAWxB,EAAKyB,QAAU,IAAIC,QAAQ,GAA3F,gBAA4GtB,KAC5G,uCAAUF,KACV,8CAAiBF,EAAK3B,qBCpD1C,IAAMsD,EAAgB,4GA4FPC,MA1Ff,WAEE,MAA4BhC,mBAAS,IAArC,mBAAOiC,EAAP,KAAeC,EAAf,KAEA,EAA0BlC,mBAAS,GAAnC,mBAAOmC,EAAP,KAAcC,EAAd,KAEA,EAA4BpC,mBAAS,GAArC,mBAAOqC,EAAP,KAAeC,EAAf,KAEA,EAA8BtC,mBAAS+B,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KAEA,EAA4BxC,mBAAS+B,GAArC,mBAAOU,EAAP,KAAeC,EAAf,KAKA9B,qBAAU,WACR4B,GAAW,SAAAG,GAAC,OAAE,KACdL,GAAU,SAAAM,GAAC,OAAG,KACdV,EAAU,IACVW,MAAMJ,EAAOJ,GACVS,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAC1C,GAEL8B,EAAU9B,EAAK6C,SAEfb,EAAShC,EAAK8C,aACdV,GAAW,SAAAG,GAAC,OAAE,UAEjB,CAACF,IAIJ7B,qBAAU,WAEI,IAATyB,IACHG,GAAW,SAAAG,GAAC,OAAE,KACdE,MAAMJ,EAAOJ,GACVS,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAC1C,GAEL8B,GAAU,SAAAS,GACR,MAAM,GAAN,mBAAWA,GAAX,YAAgBvC,EAAK6C,aAEvBhB,EAAOkB,MACPX,GAAW,SAAAG,GAAC,OAAE,WAGjB,CAACN,IAIJ,IAYMe,EAAWC,mBACXC,EAAmBC,uBAAY,SAAAC,GAChCjB,IACAa,EAASK,SAASL,EAASK,QAAQC,aACtCN,EAASK,QAAU,IAAIE,sBAAqB,SAAAC,GACvCA,EAAQ,GAAGC,gBAAkB1B,EAAQE,GACtCC,GAAU,SAAAM,GAAC,OAAEA,EAAE,QAEhBY,GAAMJ,EAASK,QAAQK,QAAQN,OAGpC,OAEI,aADE,CACD,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,CAAWxE,OA5BR,SAACyE,GACS,KAAnBA,EAAExB,OAAOyB,MACXxB,EAtDa,+HAsDUuB,EAAExB,OAAOyB,MAAQ,UACZ,KAAnBD,EAAExB,OAAOyB,OAClBxB,EAAUX,IAwByB7C,MAAO+C,EAAQ/D,aAAcoF,MAE5D,cAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,OAAlB,SACI,cAAC,EAAD,YC7ECG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.788fc958.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nconst Card = (props) => {\n    return (\n        <Link to={\"/\"+props.card.id}><div ref={props.lastMovieRef} className= 'card'>\n            <div className= 'card-image'>\n                <img src={(props.card.poster_path)?'https://image.tmdb.org/t/p/w500/'+props.card.poster_path:\"Image.png\"} alt=\"cannot display it\"/>\n            </div>\n            <div className= 'card-name-rating'>\n                <p id=\"title\">{props.card.title}</p>\n                <p id=\"rating\">{'(' + props.card.vote_average + ')'}</p>\n            </div>\n            <div className= 'card-desc'>\n                <p>{props.card.overview}</p>\n            </div>\n        </div></Link>\n    )\n}\n\nexport default Card\n","import React from 'react'\nimport './Header.css'\nimport PropTypes from 'prop-types'\nimport { BsHouseDoorFill } from \"react-icons/bs\";\nimport { Link } from \"react-router-dom\";\nconst Header = (props) => {\n    return (\n        <header>\n            {/*add the search box if isSearchBar is set to true else add the back button*/}\n            {props.isSearchBar?\n                <input type='text' placeholder=\"Search\" onChange = {props.handleOnChange}/>\n            :<h2 className=\"movie-h2\">Movie Details</h2>}\n            <Link to=\"./\"><BsHouseDoorFill className=\"home-icon\"/></Link>\n        </header>\n    )\n}\nHeader.propTypes =\n{\n    isSearchBar : PropTypes.bool.isRequired\n}\nexport default Header\n","import React from 'react'\nimport Card from './Card'\nimport './ShowCards.css'\nimport Header from './Header'\n// return the movie cards\n\n// sort function for sorting of movies\n\nconst ShowCards = (props) => {\n    \n    function GetSortOrder(key) {    \n        return function(a, b) {    \n            if (Date.parse(a[key]) < Date.parse(b[key])) {    \n                return 1;    \n            } else if (Date.parse(a[key]) > Date.parse(b[key])) {    \n                return -1;    \n            }    \n            return 0;    \n        }    \n    }    \n    // sort the cards according to there release dates\n    props.cards.sort(GetSortOrder(\"release_date\")); \n    return (\n        <>\n        <Header isSearchBar={true} handleOnChange={props.change} /> \n        <div className=\"container\" >        \n        <div id=\"show-cards\">\n        {props.cards.map((card ,index) =>\n         {  // adds a callback function to the last card being displayed\n            if(props.cards.length ===index + 1)\n            return <Card lastMovieRef={props.lastMovieRef} key={card.id} card={card}/>\n            else\n            return <Card key={card.id} desc={false} card={card}/>        \n        })}\n        </div>\n        </div>\n        </>\n    )\n}\n\nexport default ShowCards\n","import React, { useState, useEffect } from \"react\"\nimport { useParams } from \"react-router\"\nimport Header from \"./Header\"\nimport axios from \"axios\"\nimport './ShowDesc.css'\nexport default function ShowDesc() {\n    let Id = useParams()\n    const [fetchURL] = useState(`https://api.themoviedb.org/3/movie/${Id.id}?api_key=20d913bda50836a3a7c9e7ad70acab65&language=en-US`);\n    const [fetchURL2] = useState(`https://api.themoviedb.org/3/movie/${Id.id}/credits?api_key=20d913bda50836a3a7c9e7ad70acab65&language=en-US`)\n    const [data, setData] = useState({\n        release_date: ''\n    });\n    const [cast, setCast] = useState('')\n    const [director, setDirector] = useState('Cast: ')\n    const [isLoading,setIsLoading] = useState(true);\n\n    useEffect(() => {\n        const getData = async () => {\n            try {\n                const response = await axios.get(fetchURL);\n                const response2 = await axios.get(fetchURL2);\n                if(response.status === 200 && response2.status === 200){\n                    setData(response.data);\n                    response2.data.cast.map((c) =>\n                        {\n                            if(c[\"known_for_department\"]=== \"Acting\") \n                            {\n                                setCast(s => s + c.name + \", \");\n                            }    \n                        });\n                    response2.data.crew.map((c) =>\n                        {\n                            if(c[\"job\"]=== \"Director\") \n                            setDirector(c.name);\n                        });\n                    setIsLoading(false);\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        getData();\n    }\n    , []);\n    return (\n        isLoading ? <h1>Loading</h1> :\n     (\n        <>\n            <Header isSearchBar={false} />\n            <div className=\"MainContainer\">\n                <div className=\"ImgContainer\">\n                    <img src={(data.backdrop_path) ? 'https://image.tmdb.org/t/p/w500' + data.backdrop_path : \"Image.png\"} />\n                </div>\n                <div className=\"textContainer\">\n                    <h2>{data.original_title} <span>({data.vote_average})</span></h2>\n                    <p>Year: {data.release_date.slice(0,4)} | Duration: {parseFloat(data.runtime / 60).toFixed(2)} | Director: {director}</p>\n                    <p>Cast: {cast}</p>\n                    <p>Description: {data.overview}</p>\n                </div>\n            </div>\n        </>\n    )\n    )\n}\n\n\n\n\n\n","import './App.css';\nimport ShowCards from './Components/ShowCards';\nimport React, { useEffect, useState,useRef,useCallback } from 'react';\nimport ShowDesc from './Components/ShowDesc';\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nconst UPCOMMING_API = \"https://api.themoviedb.org/3/movie/upcoming?api_key=20d913bda50836a3a7c9e7ad70acab65&language=en-US&page=\";\nconst SEARCH_API = \"https://api.themoviedb.org/3/search/movie?api_key=20d913bda50836a3a7c9e7ad70acab65&language=en-US&include_adult=false&query=\";\nfunction App() {\n  // stores the movies returned by api\n  const [movies, setMovies] = useState([]);\n  // stores no of pages in response\n  const [pages, setPages] = useState(1);\n  // stores the current page that is being loaded\n  const [pageNo, setPageNo] = useState(1);\n  // stores if the data is currently loading\n  const [loading, setLoading] = useState(UPCOMMING_API);\n  // stores the target value to fetch data from\n  const [target, setTarget] = useState(UPCOMMING_API);\n  \n    \n  // sets the movie array to be empty when user makes a new search request\n  // and fill it with new response\n  useEffect(() => {\n    setLoading(m=>true)\n    setPageNo(p=> 1);\n    setMovies([]);\n    fetch(target+pageNo)\n      .then((res) => res.json())\n      .then((data) => {\n        // pushing the data to the useState\n        setMovies(data.results);\n        // setting the no of total pages that are recieved as the result of the query\n        setPages(data.total_pages);\n        setLoading(m=>false)\n      });\n  }, [target])\n  \n\n  // fetching data from the api while scrolled to next page\n  useEffect(() => {\n    //changes the state of the loading variable when data is being loaded\n    if(pageNo!==1){\n    setLoading(m=>true)\n    fetch(target+pageNo)\n      .then((res) => res.json())\n      .then((data) => {\n        // iterating over to each object and pushing it back to the setMovies useState\n        setMovies(m=>{ \n          return [...m,...data.results];\n        });\n        movies.pop();\n        setLoading(m=>false)\n      });\n    }\n  }, [pageNo])\n\n\n  // toggle between searched and upcomming movies\n  const change = (e) => {\n    if (e.target.value !== '') {    \n      setTarget(SEARCH_API + e.target.value + \"&page=\"); \n    } else if (e.target.value === '') {\n      setTarget(UPCOMMING_API);\n    }\n  }\n  \n  //applying the infinite scrolling\n  // storing the callback returned by the last element \n  // when one page loads\n  // and loading another page when the last element is visible to the user\n  const observer = useRef();\n  const lastMovieElement = useCallback(node=>{ \n    if(loading) return;\n    if(observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries=>{\n      if(entries[0].isIntersecting && pages > pageNo)\n        setPageNo(p=>p+1);\n    })\n    if(node) observer.current.observe(node)\n  })\n  \n  return (\n        // renders the document based on the url provided\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n              <ShowCards change={change} cards={movies} lastMovieRef={lastMovieElement}/>\n          </Route>\n          <Route exact path=\"/:id\">\n              <ShowDesc/>\n          </Route>\n        </Switch>\n      </Router>\n      \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}